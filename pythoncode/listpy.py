
# 列表也是一个可迭代对象
# 1. 普通形式
#         l = [1,2,3,4,5] ---整型列表
#         l = ["a","b","c"] ---字符串列表
#         l = [True,False,1>2,5<6]---布尔列表
# 2. 混合列表
# 		l = [1,2.5,"a",True]
# 3. 空列表
# 		l = []


l = [1, 2, 3]  # 下标/索引：0开始
print(l[1])


l = [1,2,3,4,5]
for i in l:
    print(i, end=" ")

l =[1,2,3,4,5,6]
for i in l:
    print(i, end=",")


l = [1, 2, 3, 4, 5]  # 下标/索引：0开始
l[2], l[3] = l[3], l[2]
print(l)

#例子:讲列表[6,7]添加到另一个列表[1,2,3,4,5]中

l = [1, 2, 3, 4, 5]
l.extend([6, 7])
print(l)

l=[1,2,3,4,5]
l.extend([6,7])
print(l)

#例子：删除列表[1, 2, 3, 4, 5]中4这个元素。
l = [1, 2, 3, 4, 5]
l.remove(4)
print(l)

l =[1,2,3,4,5]
l.remove(4)
print(l)


# 4. 修改元素
# 修改列表中的元素方法其实很简单，直接用这个方式就可以了：

# 变量[下标]=新值
# 1
# 例如：

l = [1, 2, 3, 4, 5]
l[2]=6
print(l)

# 5.列表高级特性的
# 切片操作
# 切片，顾名思义就是把1个列表切分为多个列表，语法如下：

# 变量[起始下标:结束下标] 	#结束下标取不到
# 1
# 例如

l = [1, 2, 3, 4, 5]
print(l[0:4])

l =[1,2,3,4,5]
print(l[0:2])


# 做切片操作时要注意以下几个点：

# ①如果下标从0开始可以省略不写，例如 n = l[:4]
# ②如果结束下标取的是最后一个元素，可以省略不写，例如 n = l[3:]
# ③如果列表中的元素都要，开始和结束下标都可以省略，例如 n = l[:]
# ④n = l[:-1] 表示从0开始 - 到数二个元素
# 列表的进阶操作
# 方法是 n = l[开始:结束:步长] ，这个方法既可以正向去操作列表，也可以反向去操作列表,例如:
l = [1, 2, 3, 4, 5]
n = l[-1:-3:-1]
print(n)



l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # 下标/索引：0开始
l2 = [2, 3, 4, 6]
print(l < l2)  # True


# 拼接运算符
# 拼接运算符是 + ，常用来进行两个列表拼接，例如：

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # 下标/索引：0开始
l2 = [2, 3, 4, 6]
print(l + l2)

s = [1,2,3]
s2 = [2,3,4]
print(s + s2)


# 重复操作符
# 重复操作符为 * ，后面常跟数字，表示将列表里面的元素重复复制几遍,例如：

l2 = [2, 3, 4, 6]
print(l2*2)

# 成员关系操作符
# 成员关系操作符主要有 in和not in，用来判断元素是否在列表中，返回结果是布尔值，例如：

l = [2, 3, 4, 6]
print(5 not in l)	#输出“5不在列表l中”这句话的真假

# 例如：将列表里面的所有元素进行翻转
l = [2, 3, 4, 6]
l.reverse()
print(l)


# 冒泡排序法
# 冒泡排序是列表里面比较有名的排序方法之一，例如将列表[5,4,3,2,1]里面的所有元素用冒泡排序的思想进行从小到大排序。

l = [6, 5, 4, 3, 2, 1]
for i in range(1, len(l)):  # 1,5 #循环4大次  4
    for j in range(len(l) - i):
        if l[j] > l[j + 1]:
            l[j], l[j + 1] = l[j + 1], l[j]

print(l)


l = [1, 2, 3, 4]
for i in range(1, len(l)):
    for j in range(len(l) - i):
        if l[j] > l[j+1]:
            l[j], l[j+1]=l[j+1], l[j]
print(l)
